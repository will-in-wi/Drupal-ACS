<?php
/**
 * @file
 * The ACSSync module code
 *
 * Handles the core logic of syncing AccessACS stuff to Drupal tables.
 */


/**
 * Implements hook_menu().
 */
function acssync_menu() {
  $items = array();

  $items['admin/config/content/acs-sync'] = array(
    'title' => 'AccessACS Sync Administration',
    'description' => 'Configuration for AccessACS Sync',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('acssync_admin_form'),
    'access arguments' => array('administer accessacs'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['acs-sync'] = array(
    'title' => 'Sync AccessACS',
    'description' => 'Sync AccessACS to Drupal Tables',
    'page callback' => 'acssync_sync',
    'access arguments' => array('administer accessacs'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function acssync_permission() {
  return array(
    'administer accessacs' => array(
      'title' => t('Change core settings for AccessACS integration.'),
    ),
  );
}

/**
 * Admin form callback.
 *
 * @param array  $form
 *   Drupal form
 * @param array  $form_state
 *   Drupal form state
 *
 * @return array
 *   Rendered form
 */
function acssync_admin_form($form, &$form_state) {
  $form['acs_site_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Site Number'),
    '#default_value' => variable_get('acs_site_number', ''),
    // '#description' => t('The AccessACS site number'),
    '#required' => TRUE,
  );

  $form['acs_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('acs_username', ''),
    // '#description' => t('The AccessACS site number'),
    '#required' => TRUE,
  );

  $form['acs_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('acs_password', ''),
    // '#description' => t('The AccessACS site number'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Callback for sync page.
 */
function acssync_sync() {
  echo '<pre>';

  $site_number = variable_get('acs_site_number');
  $username = variable_get('acs_username');
  $password = variable_get('acs_password');

  if (empty($site_number) || empty($username) || empty($password)) {
    drupal_set_message(t('ACS auth settings not set.'), 'error');
    return;
  }

  $acs_api = new Drupal\ACSSync\API($site_number, $username, $password);

  try {
    $result = $acs_api->get_all_people(200);
    // $result = $acs_api->get_person(271);
  }
  catch (Exception $e) {
    drupal_set_message(t('ACS API returned an error: @error', array('@error' => $e->getMessage())), 'error');
    return;
  }

  // Start new transaction.
  $transaction = db_transaction();

  try {
    db_truncate('accessacs_individuals')->execute();
    db_truncate('accessacs_addresses')->execute();
    db_truncate('accessacs_phone')->execute();
    db_truncate('accessacs_email')->execute();
    db_truncate('accessacs_addresses_individual')->execute();
    db_truncate('accessacs_phone_individual')->execute();
    db_truncate('accessacs_email_individual')->execute();

    foreach ($result->Page as $simple_person) {
      $individual = $acs_api->get_person($simple_person->IndvId);
      // var_dump($individual);
      db_insert('accessacs_individuals')
        ->fields(array(
          'IndvId' => $individual->IndvId,
          'PrimFamily' => $individual->PrimFamily,
          'MiddleName' => $individual->MiddleName,
          'Title' => $individual->Title,
          'LastName' => $individual->LastName,
          'FirstName' => $individual->FirstName,
          'PictureUrl' => $individual->PictureUrl,
          'FamilyPosition' => $simple_person->FamilyPosition,
          'Suffix' => $individual->Suffix,
          'FullName' => $individual->FullName,
          'FriendlyName' => $individual->FriendlyName,
          'FamilyPictureUrl' => $individual->FamilyPictureUrl,
          'DateOfBirth' => $individual->DateOfBirth,
          'MemberStatus' => $individual->MemberStatus,
        ))
        ->execute();

      if (is_array($individual->Addresses)) {
        foreach ($individual->Addresses as $address) {

          // Check to see if the address is already in the database.
          $res = db_select('accessacs_addresses')
            ->condition('AddrId', $address->AddrId)
            ->fields('accessacs_addresses', ['AddrId'])
            ->range(0, 1)
            ->execute()
            ->fetchField();

          // If the address doesn't exist, stick it in there.
          if ($res === FALSE) {
            db_insert('accessacs_addresses')
              ->fields(array(
                'AddrId' => $address->AddrId,
                'AddrType' => $address->AddrType,
                'MailAddress' => ($address->MailAddress) ? 1 : 0,
                'Address2' => $address->Address2,
                'City' => $address->City,
                'Address' => $address->Address,
                'Longitude' => $address->Longitude,
                'State' => $address->State,
                'ActiveAddress' => ($address->ActiveAddress) ? 1 : 0,
                'Zipcode' => $address->Zipcode,
                'FamilyAddress' => ($address->FamilyAddress) ? 1 : 0,
                'Country' => $address->Country,
                'Company' => $address->Company,
                'StatementAddress' => ($address->StatementAddress) ? 1 : 0,
                'Latitude' => $address->Latitude,
                'CityStateZip' => $address->CityStateZip,
                'AddrTypeId' => $address->AddrTypeId,
              ))
              ->execute();
          }

          // Add to join table.
          db_insert('accessacs_addresses_individual')
            ->fields(array(
              'IndvId' => $individual->IndvId,
              'AddrId' => $address->AddrId,
            ))
            ->execute();
        }
      }
      else {
        watchdog('ACSSync', 'Individual  of ID @id has a invalid Address array.', array('@id' => $individual->IndvId), WATCHDOG_WARNING);
      }

      if (is_array($individual->Phones)) {
        foreach ($individual->Phones as $phone) {

          // Check to see if the phone number is already in the database.
          $res = db_select('accessacs_phone')
            ->condition('PhoneId', $phone->PhoneId)
            ->fields('accessacs_phone', ['PhoneId'])
            ->range(0, 1)
            ->execute()
            ->fetchField();

          // If the phone number doesn't exist, stick it in there.
          if ($res === FALSE) {
            db_insert('accessacs_phone')
              ->fields(array(
                'PhoneId' => $phone->PhoneId,
                'PhoneTypeId' => $phone->PhoneTypeId,
                'PhoneRef' => $phone->PhoneRef,
                'Listed' => ($phone->Listed) ? 1 : 0,
                'PhoneNumber' => $phone->PhoneNumber,
                'Preferred' => ($phone->Preferred) ? 1 : 0,
                'FamilyPhone' => ($phone->FamilyPhone) ? 1 : 0,
                'AddrPhone' => ($phone->AddrPhone) ? 1 : 0,
                'Extension' => $phone->Extension,
                'PhoneType' => $phone->PhoneType,
              ))
              ->execute();
          }

          // Add to join table.
          db_insert('accessacs_phone_individual')
            ->fields(array(
              'IndvId' => $individual->IndvId,
              'PhoneId' => $phone->PhoneId,
            ))
            ->execute();
        }
      }
      else {
        watchdog('ACSSync', 'Individual  of ID @id has a invalid Phone Number array.', array('@id' => $individual->IndvId), WATCHDOG_WARNING);
      }

      if (is_array($individual->Emails)) {
        foreach ($individual->Emails as $email) {

          // Check to see if the email address is already in the database.
          $res = db_select('accessacs_email')
            ->condition('EmailId', $phone->EmailId)
            ->fields('accessacs_email', ['EmailId'])
            ->range(0, 1)
            ->execute()
            ->fetchField();

          // If the email address doesn't exist, stick it in there.
          if ($res === FALSE) {
            db_insert('accessacs_email')
              ->fields(array(
                'EmailId' => $email->EmailId,
                'Listed' => ($email->Listed) ? 1 : 0,
                'Preferred' => ($email->Preferred) ? 1 : 0,
                'EmailType' => $email->EmailType,
                'Email' => $email->Email,
              ))
              ->execute();
          }

          // Add to join table.
          db_insert('accessacs_email_individual')
            ->fields(array(
              'IndvId' => $individual->IndvId,
              'EmailId' => $email->EmailId,
            ))
            ->execute();
        }
      }
      else {
        watchdog('ACSSync', 'Individual  of ID @id has a invalid Email Address array.', array('@id' => $individual->IndvId), WATCHDOG_WARNING);
      }
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    var_dump($e);
    watchdog('ACSSync', 'ACS Sync failed, database error: @message', array('@message' => $e->getMessage()), WATCHDOG_ERROR);
  }

}


/**
 * TODO: Sync views fields with table fields.
 * TODO: Expose child tables to views.
 * TODO: Set up relationships in views.
 * TODO: Set up sync code to use the Batch API.
 * TODO: Use Background Batch to make this work with Cron. https://drupal.org/project/background_process
 * TODO: Abstract sync code into its own class.
 * TODO: Create manual form for syncing data.
 * TODO: Consider using the long process API for this.
 * TODO: Create the ability to run this on a cron job.
 */
